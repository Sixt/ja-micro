version: "2.1"

services:
  com.sixt.service.test-service:
    build:
      context: ../../../build/docker
      dockerfile: Dockerfile
    environment:
      - "kafkaServer=kafka:9092"
      - "logLevel=DEBUG"
      - "registry=consul"
      - "servicePort=42000"
      - "readinessCheckPort=21000"
    entrypoint: java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005 -server -Dfile.encoding=UTF8 -XX:-OmitStackTraceInFastThrow -Djava.security.egd=file:/dev/./urandom -jar /app.jar -registryServer consul:8500
    ports:
      - "5005"
      - "42000"
    depends_on:
      zookeeper:
        condition: service_started
      consul:
        condition: service_started
      kafka:
        condition: service_healthy

  consul:
    image: consul:0.7.5
    command: "agent -server -bootstrap -data-dir=/tmp -client=0.0.0.0 -ui"
    ports:
      - "8500"
    hostname: consul

  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    ports:
      - "2181"
    hostname: zookeeper

  kafka:
    image: wurstmeister/kafka:0.10.1.0
    ports:
      - "9092"
    environment:
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_CREATE_TOPICS: "inbox_test:3:1,inbox-com.sixt.service.test-service:3:1,message-count:3:1,events.RandomTopic:3:1,events:3:1" # events must be last for the healthcheck to work
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scripts/start_kafka.sh:/tmp/start_kafka.sh
    depends_on:
      - "zookeeper"
    entrypoint: /tmp/start_kafka.sh
    hostname: kafka
    healthcheck:
      # nota bene: test command is executed inside the container
      test: ["CMD-SHELL", "/opt/kafka_2.11-0.10.1.0/bin/kafka-topics.sh --zookeeper zookeeper:2181 --list | grep 'events$$' "]
      interval: 10s  # test is executed every 10s
      timeout: 10s   # timeout per test cmd
      retries: 12    # try 12*10s = 120s = 2min